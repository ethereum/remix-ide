# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-22, Remix;
# This file is distributed under the same license as the Remix - Ethereum IDE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Remix - Ethereum IDE 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-19 15:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../udapp.md:1
msgid "Run & Deploy (part 2)"
msgstr ""

#: ../../udapp.md:4
msgid "Deployed contracts"
msgstr ""

#: ../../udapp.md:6
msgid "This section in the Run tab contains a list of deployed contracts to interact with through autogenerated UI of the deployed contract (also called udapp)."
msgstr ""

#: ../../udapp.md:8
msgid "The deployed contract appears but is in its collapsed form."
msgstr ""

#: ../../udapp.md:12
msgid "Click the sideways caret to open it up."
msgstr ""

#: ../../udapp.md:16
msgid "You will see the functions in the contract.  The functions buttons can have different color buttons."
msgstr ""

#: ../../udapp.md:18
msgid "Functions that are constant or pure functions in Solidity have a blue buttons. Clicking one of this type does not create a new transaction. So clicking will not cause state changes - it will only return a value stored in the contract - so it won't cost you anything in gas fees."
msgstr ""

#: ../../udapp.md:20
msgid "Functions that change the state of the contract AND that do not accept Ether are called non-payable functions and have an orange button. Clicking on them will create a transaction and thus cost gas."
msgstr ""

#: ../../udapp.md:22
msgid "Functions that have red buttons are payable functions in Solidity. Clicking one of these will create a new transaction and this transaction can accept a value.  The value is put in in the Value field which is under the Gas Limit field."
msgstr ""

#: ../../udapp.md:27
msgid "See more information about Solidity modifiers in the Solidity docs. ."
msgstr ""

#: ../../udapp.md:31
msgid "If a function requires input parameters, well.. you gotta put them in."
msgstr ""

#: ../../udapp.md:33
msgid "Inputting parameters"
msgstr ""

#: ../../udapp.md:37
msgid "Inputting parameters in the collapsed view"
msgstr ""

#: ../../udapp.md:39
msgid "(Inputting all the parameters in a single input box)"
msgstr ""

#: ../../udapp.md:40
msgid "The input box tells you what type each parameter needs to be."
msgstr ""

#: ../../udapp.md:41
msgid "Numbers and addresses do not need to be wrapped in double quotes."
msgstr ""

#: ../../udapp.md:42
msgid "Strings need to be wrapped."
msgstr ""

#: ../../udapp.md:43
msgid "Parameters are separated by commas."
msgstr ""

#: ../../udapp.md:45
msgid "In the example above the \"delegate\" function has 3 parameters."
msgstr ""

#: ../../udapp.md:47
msgid "Inputting parameters in the expanded view"
msgstr ""

#: ../../udapp.md:48
msgid "Clicking the 'down' caret brings you to the Multi-param Manager - where you can input the parameters one at a time. Much less confusing!"
msgstr ""

#: ../../udapp.md:52
msgid "In the expanded view, strings do not need to be wrapped."
msgstr ""

#: ../../udapp.md:54
msgid "Clicking the clipboard icon will encode the inputs and will copy them.  Only a valid set of inputs can be encoded."
msgstr ""

#: ../../udapp.md:56
msgid "So if you made a mistake and put a uint8 where an address should have been, clicking the clipboard here will give you an error."
msgstr ""

#: ../../udapp.md:58
msgid "Low level interactions"
msgstr ""

#: ../../udapp.md:60
msgid "Low level interactions are used to send funds or calldata or funds & calldata to a contract through the receive() or fallback() function.  Typically, you should only need to implement the fallback function if you are following an upgrade or proxy pattern."
msgstr ""

#: ../../udapp.md:62
msgid "The low level interactions section is below the functions in each deployed contract."
msgstr ""

#: ../../udapp.md:67
msgid "Please note the following:"
msgstr ""

#: ../../udapp.md:69
msgid "If you are executing a plain Ether transfer to a contract, you need to have the receive() function in your contract.  If your contract has been deployed and you want to send it funds, you would input the amount of Ether or Wei etc. (see A in graphic below), and then input NOTHING in the calldata field of Low level interactions (see B in graphic) and click the Transact button (see C in graphic below)."
msgstr ""

#: ../../udapp.md:73
msgid "If you are sending calldata to your contract with Ether, then you need to use the fallback() function and have it with the state mutability of payable."
msgstr ""

#: ../../udapp.md:75
msgid "If you are not sending ether to the contract but are sending call data then you need to use the fallback() function."
msgstr ""

#: ../../udapp.md:77
msgid "If you break the rules when using the Low level interactions you will be slapped with a warning."
msgstr ""

#: ../../udapp.md:79
msgid "Please see the solidity docs for more specifics about using the fallback and receive functions."
msgstr ""

#: ../../udapp.md:81
msgid "Passing in a tuple or a struct to a function"
msgstr ""

#: ../../udapp.md:82
msgid "To pass a tuple in, you need to put in an array []."
msgstr ""

#: ../../udapp.md:84
msgid "Similarly, to pass in a struct as a parameter of a function, it needs to be put in as an array [].  Also note that the line pragma experimental ABIEncoderV2; needs to put in at the top of the solidity file."
msgstr ""

#: ../../udapp.md:88
msgid "Example of passing nested struct to a function"
msgstr ""

#: ../../udapp.md:89
msgid "Consider a nested struct defined like this:"
msgstr ""

#: ../../udapp.md:101
msgid "If a function has the signature fertilizer(Garden memory gardenPlot) then the correct syntax is:"
msgstr ""

#: ../../udapp.md:106
msgid "To continue on this example, here's a sample contract:"
msgstr ""

#: ../../udapp.md:133
msgid "After compiling, deploying the contract and opening up the deployed instance, we can then add the following input parameters to the function named fertilizer :"
msgstr ""

#: ../../udapp.md:139
msgid "The function fertilizer accepts a single parameter of the type Garden. The type Garden is a struct. Structs are wrapped in square brackets.  Inside Garden is an array that is an array of structs named theFlowers. It gets a set of brackets for the array and another set for the struct. Thus the double square brackets."
msgstr ""

